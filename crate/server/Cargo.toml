[package]
name = "cosmian_findex_server"
version.workspace = true
authors.workspace = true
categories.workspace = true
edition.workspace = true
keywords.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
description = "Cosmian Findex server"

[[bin]]
name = "cosmian_findex_server"
path = "src/main.rs"
test = false

[lib]
# doc test linking as a separate binary is extremely slow
# and is not needed for internal lib
doctest = false

[features]
# Do not verify auth0 token expiration date and https ssl is auto-signed (to avoid to be banned by letsencrypt)
insecure = []

[dependencies]
actix-cors = "0.6"
actix-identity = "0.6"
actix-service = "2.0"
actix-tls = "3.4"
actix-web = { workspace = true, features = ["macros", "openssl"] }
alcoholic_jwt = "4091"
async-trait = "0.1.83"
chrono = "0.4"
clap = { workspace = true, features = [
  "help",
  "env",
  "std",
  "usage",
  "error-context",
  "derive",
  "cargo",
] }
cosmian_findex = { workspace = true, features = ["redis-mem"] }
cosmian_findex_structs = { path = "../structs" }
cosmian_logger = { workspace = true }
dotenvy = "0.15"
futures = "0.3"
openssl = { workspace = true, default-features = false }
redis = { version = "0.28.1", features = [
  "aio",
  "script",
  "connection-manager",
  "tokio-comp",
] }
# Important: align the rustls version with reqwest rustls dependency
# When using client certificate authentication, reqwest will use the
# native-tls crate to create an Identity; this will be different backend
# implementations depending on the operating system. On linux, it will
# use openssl
# The default features is to guarantee that the native-tls crate will be used
reqwest = { workspace = true, features = ["default", "json"] }
serde = { workspace = true }
serde_json = { workspace = true }
sqlx = { version = "0.8.2", default-features = false, features = [
  "json",
  "runtime-tokio-native-tls",
] }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["full"] }
toml = "0.8"
tracing = { workspace = true }
url = { workspace = true }
uuid = { workspace = true, features = ["v4"] }
cosmian_crypto_core = { workspace = true }

[dev-dependencies]
tempfile = { workspace = true }

# ------------------------------------------------------------------------------
# START DEBIAN PACKAGING
[package.metadata.deb]
maintainer = "Emmanuel Coste <emmanuel.coste@cosmian.com>"
maintainer-scripts = "../../pkg/deb/"
copyright = "2024, Cosmian Tech SAS <tech@cosmian.com>"
license-file = ["../../LICENSE", "0"]
changelog = "../../CHANGELOG.md"
section = "security"
priority = "optional"
assets = [
  [
    "target/release/cosmian_findex_server",
    "usr/sbin/cosmian_findex_server",
    "500",
  ],
  [
    "../../README.md",
    "usr/share/doc/cosmian_findex_server/README",
    "644",
  ],
  [
    "../../pkg/findex_server.toml",
    "etc/cosmian/",
    "400",
  ],
]
systemd-units = [
  { unit-name = "cosmian_findex_server", unit-scripts = "../../pkg", enable = true, start = false, restart-after-upgrade = false },
]

# END DEBIAN PACKAGING
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# START RPM PACKAGING
[package.metadata.generate-rpm]
license = "BUSL-1.1"
assets = [
  { source = "target/release/cosmian_findex_server", dest = "/usr/sbin/cosmian_findex_server", mode = "500" },
  { source = "../../README.md", dest = "/usr/share/doc/cosmian_findex_server/README", mode = "644", doc = true },
  { source = "../../pkg/findex_server.toml", dest = "/etc/cosmian/findex_server.toml", mode = "400" },
  { source = "../../pkg/cosmian_findex_server.service", dest = "/lib/systemd/system/cosmian_findex_server.service", mode = "644" },
]
auto-req = "no" # do not try to discover .so dependencies
require-sh = true
