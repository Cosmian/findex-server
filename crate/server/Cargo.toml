[package]
name = "cosmian_findex_server"
version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
categories.workspace = true
keywords.workspace = true
description = "Cosmian Findex server"

[[bin]]
name = "cosmian_findex_server"
path = "src/main.rs"
test = false

[lib]
# doc test linking as a separate binary is extremely slow
# and is not needed for internal lib
doctest = false

[features]
# Do not verify auth0 token expiration date and https ssl is auto-signed (to avoid to be banned by letsencrypt)
insecure = []

[dependencies]
actix-cors = "0.6"
actix-identity = "0.6"
actix-service = "2.0"
actix-tls = "3.4"
actix-web = { workspace = true, features = ["macros", "openssl"] }
alcoholic_jwt = "4091"
argon2 = "0.5"
async-trait = "0.1"
base64 = { workspace = true }
chrono = { workspace = true }
cosmian_logger = { path = "../logger" }
clap = { workspace = true, features = [
  "help",
  "env",
  "std",
  "usage",
  "error-context",
  "derive",
  "cargo",
] }
cloudproof = { workspace = true }
cloudproof_findex = { version = "5.0", features = ["findex-redis"] }
dotenvy = "0.15"
futures = "0.3"
hex = { workspace = true, default-features = false }
lazy_static = "1.5"
num-bigint-dig = { workspace = true, features = [
  "std",
  "rand",
  "serde",
  "zeroize",
] }
num_cpus = { workspace = true }
openssl = { workspace = true, default-features = false }
rawsql = "0.1"
redis = { version = "0.23", features = [
  "aio",
  "ahash",
  "script",
  "connection-manager",
  "tokio-comp",
] }
# Important: align the rustls version with reqwest rustls dependency
# When using client certificate authentication, reqwest will use the
# native-tls crate to create an Identity; this will be different backend
# implementations depending on the operating system. On linux, it will
# use openssl
# The default features is to guarantee that the native-tls crate will be used
reqwest = { workspace = true, features = ["default", "json"] }
serde = { workspace = true }
serde_json = { workspace = true }
sqlx = { version = "0.8.2", default-features = false, features = [
  "json",
  "runtime-tokio-native-tls",
  "sqlite",
] }
thiserror = { workspace = true }
time = { workspace = true, features = ["local-offset", "formatting"] }
tokio = { workspace = true, features = ["full"] }
toml = "0.8"
tracing = { workspace = true }
url = { workspace = true }
x509-parser = { workspace = true }
zeroize = { workspace = true, default-features = false }
